{
	"name": "React Charts",
	"website": "https://couch3ater.github.io/stateless-react-charts",
	"repository": "https://github.com/couch3ater/stateless-react-charts/",
	"technologies": [
		"Create React App",
		"ChartJS v1.1.1",
		"react-chartjs",
		"BulmaIO",
		"Papaparse"
	],
	"description": "This project was developed as an exercise in parsing, storing, and displaying large data sets using React. TSA Claims Data between the years of 2010 and 2013 was used as a sample. This data can be downloaded [here](https://www.dhs.gov/sites/default/files/publications/claims-2010-2013_0.xls \"Download\"). The XLS file was converted to CSV before being loaded into the application.",
	"body": [
		"A little about this project, you say? Hrm. Where to start...",
		"This project, initially, was not one that I came up with on my own. A few years back when I was applying for jobs, I received a request to complete a coding challenge in order to determine if I was up to snuff. Spoiler alert: I didn't get the job. Didn't seem like a great fit for me at the time. But! The coding challenge they had left me with intriguied me. Having spent a fair amount of time constructing data types in a past life, I was eager to try and wrap my head around how I would approach their request.",
		"I guess before I proceed any further, I should talk a little bit about what was asked of me. As the opening was for a Front End Development position, the request involved parsing and manipulating a large amount of complex-ish data on the client side then presenting a number of requested views to the end user. The requirements for the project explicitly stated that no backend technologies should be used. A number of UI requirements were provided as well, and we can touch on those later when we're reviewing the final result, but for now, we'll focus on the data requirements.",
		"<figure class='float-right col-xs-12 col-sm-8 col-md-6 col-lg-6 col-xl-5 col-5 blog-post-img'><img src='https://raw.githubusercontent.com/cjtangney/cjt2019/master/public/img/work/stateless-charts/01.PNG' alt='Line Chart View' class='img-responsive' /><figcaption class='text-center'>View of Airline Claim Sums</figcaption></figure>The data set provided was a collection of TSA Claims data captured between the years of 2010 and 2013. That data can actually be downloaded by clicking [here](https://www.dhs.gov/sites/default/files/publications/claims-2010-2013_0.xls \"Download\") if you like. Information captured in the report includes things like the Airport where the claim originated and the Airline associated with that claim. It also contains some information pertaining to the claim itself, like the item's category, the claim amount, the claim date, and so on. From this data, the following two views were requested: A line plot of the Value Lost per Month, separated by Airline and a bar graph of the Average Claim Value per Month, separated by Airport Code.",
		"After looking at the data for a fair while, I finally came to the conclusion that it would probably be easiest for me to use a number of JavaScript classes. This meant I could store all the necessary information as little \"objects\" (yea yea, I know it's more complicated than that), allowing me to referene certain things in the data more easily. It had been awhile since I had worked with classes in JavaScript, which was fine. It gave me a good excuse to not only work on building data types again, but it also allowed me the opportunity to brush up on using classes. Hooray!",
		"Ultimately, I concluded that in order to provide support for the requested views, I would need three data types:",
		"* An Airline data type would allow me to store all claim information that pertains to a given airline code. An Airport data type would do functionally the same thing as the Airline data type, just for airport data. Essentially, each data type stores a number of arrays that contain information pertaining to a given year's total claims.",
		"* A MonthlyClaim data type would allow me to store all the claim information for a given month in a way that is easily referenced. This data type does the bulk of the work by storing all the claims for the month, calculating the total claim amount, and also keeping track of the monthly average. Each Airline / Airport data type contains arrays which hold MonthlyClaim objects.",
		"To me, this made the most sense to accomplish the task at hand. Since both requested views were \"monthly\" views, I felt it was only appropriate to store information by month. That said, if a future request came through that required me to display data at a more granular level (for example, display a line plot to show daily Value Lost by month), having that data would be important. This heavily influenced my decision to store the claim information as opposed to just keeping track of the sum and the average -- the two requested views.",
		"In looking back, since the Airline and Airport data types are virtually identical, consolidating them into a single class would probably have been for the best. Including some information in a combined class to specify the list type (airport or airline) would have allowed for differentiation further down the road. At the time, I'm certain I was likely just focused on *\"Airline data, Airport data, Airline data, Airport data...\"* I digress.",
		"As far as GUI requirements went, I was given a fair amount of creative libery when it came to how I wanted to present the data. The only requirement was that a tab bar be included at the top of the page in order to allow the end user to switch between graph views. I utilized the tab bar at the top of the page to allow a user the ability to switch between years in the data set. This, to me, felt less obtrusive then including *every possible graph view* for the year on a single page. I also felt it would be more easily navigable than invluding all possible graph views in a tab group at the top.",
		"<figure class='float-right col-xs-12 col-sm-8 col-md-6 col-lg-6 col-xl-5 col-5 blog-post-img'><img src='https://raw.githubusercontent.com/cjtangney/cjt2019/master/public/img/work/stateless-charts/04.PNG' alt='Bar Chart View' class='img-responsive' /><figcaption class='text-center'>View of Airport Claim Averages</figcaption></figure>To enable the user to switch between airlines or airports, I included a dropdown below each graph containing the full list of each. This seemed like an appropriate way to allow users to view all the relevant data while not clogging the viewport or overwhelming them with information. Since dropdowns are intuitive enough to use in this day and age, it also seemed like the logical choice to display a large list of different options.",
		"Because I used ChartJS, selecting a new airline, airport, or year would re-draw the graph in real-time to reflect the changes in data. If you clicked through to the hosted version of this application, I'm certain you probably noticed I am displaying a \"page loader\" briefly before the data has finished loading. Since I initialize the graphs and dropdowns in an empty state, this is largely just to prevent the user from seeing the initial re-draw of the graphs and dropdowns.",
		"In all, I had a fun time wrapping my head around this project. Not only did I enjoy reliving my days working with and parsing large data sets, but I also welcomed the challenege of presenting that data to someone in a format that is easily consumed. I can't help but feel like this is an important step in the design process that is frequently overlooked. Even if all the information is presented to the user, if they cannot find the information they are looking for easily, and in a meaninful time, then it is all too likely that they will get frustrated with your design and seek the information elsewhere -- perhaps somewhere it is easily found!"
	]
}

