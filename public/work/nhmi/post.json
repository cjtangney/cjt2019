{
	"name": "New Hampshire Mountain Inn",
	"website": "",
	"repository": "",
	"technologies": [
		"Razzle",
		"Strapi",
		"MongoDB",
		"Spectre CSS",
		"ExpressJS"
	],
	"description": "During my time as Webmaster for Pacific Group Resorts, one of the things that I sought to address most was modernizing their web presence. Not only was the look and feel of their existing web presence rather dated, but on their current content management system, their time to web was slow. This impacted their ability to respond to industry changes efficiently. Enter Strapi, React, and a modern, responsive design!",
	"body": [
		"Prior to becoming webmaster for Pacific Group, I had worked for Ragged Mountain Resort, one of their ski areas, as a marketing assistant and IT support staff member. In this role, I worked pretty closely with the marketing director at Ragged to help make a number of updates to their web pages. My coding background was not something that they had bargained for when I was hired, so it quickly fell to me to manage all updates to the site.",
		"<figure class='float-right col-xs-12 col-sm-8 col-md-6 col-lg-6 col-xl-5 col-5 blog-post-img'><img src='/img/work/nhmi/strapi-01.PNG' alt='Strapi Dashboard' class='img-responsive' /><figcaption class='text-center'>Strapi Dashboard</figcaption></figure>One of my primary complaints as a content editor for the resort was that our overall time to web was pretty long. Their web page was being served using an older content management system that had been purchased by another company with few plans to continue extended support. Couple that with a clunky, three-server configuration that has limited ability to configure synchronization schedules, and you're left with a web publication platform that resembles something out of the digital stone ages. In an industry where responding to things like changes in the weather at a moment's notice is of utmost importance, a publication time of around 15 to 30 minutes is unacceptable.",
		"It also occurred to me that it would behoove them to make a better effort of trying to separate their actual *content* from their endpoints. Much of the content that was loaded into their CMS was web-specific. Images were formatted to specific pixel dimensions, copy text referenced specific links on webpages, and so on. Personally, I feel that this is not a great practice as it requires this content to then be reformatted before being served to another endpoint. The role of massaging the content to fit a given layout should fall to the designer, only relying on the content creator for some editorial guidance if necessary. I strongly believe that a content creator is more prone to generating quality content when this can be done in a manner that is agnostic from design.",
		"Keeping all of this in mind (faster time to web, better separation of concerns), when I was promoted to webmaster for PGR, I sought out to find a replacement that would suit the needs of the Resort without breaking the bank. Enter: [Strapi](https://strapi.io/) -- a self-hosted, customizable, and performant \"Content API\". It allows you to structure data types, upload content, and more. I could talk at length about the applications that I feel something like Strapi could be used for, but I think that would probably leave us somewhere in the weeds, so for for now, I'll just give it the shameless plug and tell you that you should check it out. Seriously. For my purposes, I would essentially just be setting Strapi up as a headless content management system that would serve hosted data over a bunch of different endpoints.",
		"Strapi supports a couple of back end technologies, including MongoDB, so for me, the choice was obvious. MongoDB would allow my to structure the data in a way that would make sense to me, but it would also interact nicely with ReactJS when I got around to developing the front end to *serve* this content. Approaching the data first allowed me to put my theories about design agnostic content generation to the test, but in order to do this, I would need a guinea pig. One of Ragged Mountain Resort's properties, the New Hampshire Mountain Inn, contained a small enough amount of content that I felt it would be the perfect candidate, so I set out to duplicate all the relevant content. I paid very little attention to the existing design, really only grabbing the important bits of information that would likely be the same across *all* endpoints.",
		"<figure class='float-right col-xs-12 col-sm-8 col-md-6 col-lg-6 col-xl-5 col-5 blog-post-img'><img src='/img/work/nhmi/mobile-04.PNG' alt='Mobile Layout Screenshot' class='img-responsive' /><figcaption class='text-center'>Example of a 'Room Card'</figcaption></figure>Once I had all the key data points loaded into Strapi, I set out to generate some \"content\" for the site. I am not all that great at generating copy text, so most of what I came up with was fluff, but that was okay, since this data was really only going to be used as a litmus in the first place. After I had completed this, I put my design cap on and started work on designing the *website* to fit the *content*. This project was bootstrapped using a tool called [Razzle](https://github.com/jaredpalmer/razzle). It's very similar to create-react-app, and at the time, I was exploring some alternative bootstrapping tools. Honestly, I did not find the developer experience too different from other similar tools. Again, I can talk more about this later, so let's get back on topic.",
		"I worked to create a simple design that would allow the content to be the focal point. As this website was for an Inn, it was obviously important that all data pertaining to individual rooms -- amentities, rates, room descriptions, etc -- was displayed clearly. I also felt it important to make this information accessible in a number of locations. As such, an overview page containing thumbnails for each room with key information was developed, as well as pages for each room itself. Individual room pages and the Nav component are generated using a static template and data that is served over a Strapi endpoint. Other information, such as dinner and breakfast menu items, area attractions, and Inn policies are also stored in Strapi and served over different endpoints.",
		"Honestly, I really enjoyed working on all the edge case scenarios that presented themsevles while working on this. I focused on ensuring that data, no matter the size, shape, or design, flowed onto the page nicely. Finding solutions for cases where the data was exceptionally small, or vice versa, proved to be good learning experiences, as it allowed me to reasses how I am laying pages out. I think that, moving forward, I will not only be keeping various viewports in mind (something that I find a lot of people still overlook) while designing but also how various data types may flow into it."
	]
}
