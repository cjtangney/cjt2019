{
	"name": "CoupON",
	"website": "",
	"repository": "",
	"technologies": [
		"ReactJS",
		"Express",
		"MongoDB",
		"Spectre CSS",
		"Socket.IO",
		"Axios"
	],
	"description": "CoupON is a project that arose from a need for an application that would allow easy generation of serial numbers to be used with various barcodes or coupons. In addition to generation of the serial numbers, the application also allows for customer service representatives to redeem barcoded vouchers at a point of sale terminal.",
	"body": [
		"<figure class='float-right col-xs-12 col-sm-8 col-md-6 col-lg-6 col-xl-5 col-5 blog-post-img'><img src='https://raw.githubusercontent.com/cjtangney/cjt2019/master/public/img/work/coupon/02.PNG' alt='CoupON Redemption Module Screenshot' class='img-responsive' /><figcaption class='text-center'>CoupON Redemption Module</figcaption></figure>While I was working in the ski industry, there was a season where the decision was made to start producing vouchers with barcodes printed on them in an effort to help reduce the ease of replication. Prior to this decision, existing coupons or vouchers were essentially just printed onto card stock then sent into the wild. Some were distributed to area ski shops while others were traded with local businesses for goods or services.",
		"In addition to preventing duplication, adding barcodes and scanning the coupon into a point of sale terminal would allow for the ability to track things like coupon redemption rates, return rates for various coupon types, and so on. In the ski industry, information like this is obviously invaluable. After a little research, I discovered that there were some existing softwares that would allow us the ability to scan these barcodes and compare against our database, but the monetary cost associated with them would have been too great at the time. Some additional modules could have been developed for current point of sale solution as well, but that too would have had a monetary cost associated with it.",
		"This problem seemed like it should have a simple solution. At the end of the day, the only things that would be necessary in order to facilitate this kind of functionality would be some kind of back end and a client that can connect to it and validate some data. The data for these kinds of barcodes was pretty simple, too. Generating the first couple of files in Excel was easy enough, but supplying thousands of barcodes for potentially hundreds of different coupon types would eventually become a daunting task. It quickly became obvious that including the ability to generate the barcode serial numbers themselves would be an important feature to include. Allowing users to import these lists directly into the back end after generation only seemed like the next logical progression, so that feature was included as well.",
		"Consisting of a MongoDB backend and a ReactJS client, CoupON essentially just stores CSV data with some additional information pertaining to the specific voucher. Each voucher object in the data consists of an individual serial number tied to the barcode, a tag to indicate the voucher's redepmtion status, and a field to track the redepmtion date. Each list also keeps track of some basic information like the total number of vouchers that have been redeemed.",
		"Generating lists is a fairly simple process as well, really only requiring some basic information like a voucher type and a total quantity. Admittedly, this section of the application has had the least amount of time dedicated to it, as the initial solution was developed separately from the rest of CoupON. This section was, in reality, added in after the fact as a \"module,\" if you will. Mostly I did it to make my life easier while generating new lists for the upcoming ski season, but it was also a fun way to test the scalability of my application. Seeing that I could easily add pre-existing modules into the application was reassuring to me and meant that adding support for future requests was not something that would require me to rebuild from the ground up. Some additional directions on how to use this module, as well as support for various barcode layouts and different fields would probably be required before this application saw any real world use.",
		"<figure class='float-right col-xs-12 col-sm-8 col-md-6 col-lg-6 col-xl-6 col-5 blog-post-img'><img src='https://raw.githubusercontent.com/cjtangney/cjt2019/master/public/img/work/coupon/13.PNG' alt='CoupON Redemption Module Screenshot' class='img-responsive' /><figcaption class='text-center'>CoupON Reporting Module</figcaption></figure>Reporting was something that I knew needed to be included from the start of this project, but in knowing that, I was particularly careful while designing the initial data type. Allowing each barcode object to keep track of it's redepmtion status made reporting things like total number redeemed trivial. Including a date redeemed field would also be necessary in order to allow filtering by redemption date. Further breaking the data out into list type would allow me to make light work of reporting things like redemption by coupon type.",
		"Finally, it was important that the data be accessible in real-time and consistent across all connected clients. In order to accomplish this, the client is synced with the back end data using webhooks (Socket.IO) so that all connected clients will reflect the current state of redeemed vouchers. This not only allows accurate reporting for all users but also ensures that a voucher cannot be used twice between unsynchronized clients.",
		"This was a fun project, and honestly, I learned a lot working through it. Having never used webhooks before, wrapping my head around their nuiances was a fun challenge, and I also greatly enjoyed carefully designing my data schema. I aim to continue development on this project, probably by adding additional support to the generation module, developing a proper upload module for lists generated externally, and adding more funationallity to the reporting module. Who knows, maybe I'll start making some blog posts about this one.",
		"In any event... Thanks for reading!"
	]
}
