{"version":3,"sources":["src/components/Cards/assets/ts/_card-media.ts","src/assets/ts/resize-observer.ts","src/assets/ts/c3.ts","@stencil/core/internal/app-globals"],"names":["cardMediaVals","flexBasis","minWidth","C3ResizeObserver","ResizeObserver","[object Object]","super","entries","forEach","entry","cssClasses","Array","from","target","classList","some","cssClass","test","this","wrapCard","wrapInlineListGroup","card","cardClass","closest","getAttribute","offsetWidth","includes","replace","split","classString","add","flexList","window","innerWidth","_BREAKPOINTS_","md","contains","firstElementChild","offsetHeight","parseInt","getComputedStyle","querySelector","marginBottom","marginTop","currentY","getBoundingClientRect","y","querySelectorAll","item","index","box","remove","resizeObserver","appGlobalScript","async","globalThis","globalScripts"],"mappings":";;;;+CAYA,MAAAA,EAAe,CACXC,UAAW,aACXC,SAAU,WCCOC,UAAyBC,EAAAA,eAC1CC,cACIC,OAAOC,IACHA,EAAQC,SAASC,IACb,MAAMC,EAAaC,MAAMC,KAAKH,EAAMI,OAAOC,WAE3C,GAAIJ,EAAWK,MACVC,GAAa,WAAWC,KAAKD,KAC/BE,KAAKC,SAASV,EAAMI,QAEvB,GAAIH,EAAWK,MACVC,GAAa,gBAAgBC,KAAKD,KACpCE,KAAKE,oBAAoBX,EAAMI,cAatCR,SAASgB,GACb,IAAIC,EAAY,UAEhB,GAAID,EAAKE,QAAQ,WAAWC,aAAa,gBAAkB,KAAM,CAC7DF,EAAY,GAAGA,eAGnB,GAAID,EAAKE,QAAQ,WAAWC,aAAa,gBAAkB,KAAM,CAC7DF,EAAY,GAAGA,KAAaD,EAAKE,QAAQ,WAAWC,aAAa,gBAGrE,GAAIH,EAAKI,YAAczB,EAAcC,UAAYD,EAAcE,SAAU,CACrEmB,EAAKP,UAAUN,SAASQ,IACpB,GACIA,EAASU,SAASJ,IACfN,EAASU,SAAS,aACvBL,EAAKP,UAAUa,QAAQX,EAAUM,GAEnC,GACIN,EAASU,SAASJ,IACfN,EAASU,SAAS,cACvBL,EAAKP,UAAUa,QAAQX,EAAUM,WAEpC,GAAID,EAAKE,QAAQ,WAAWC,aAAa,oBAAqB,CACjEH,EAAKP,UAAUN,SAASQ,IACpBK,EAAKP,UAAUa,QACXX,EACA,GAAGM,KAAaD,EAAKE,QAAQ,WAAWC,aAAa,8BAI1D,CACHH,EAAKP,UAAUN,SAASQ,IACpBK,EAAKP,UAAUa,QAAQX,EAAU,GAAGM,iBAI5C,GAAID,EAAKE,QAAQ,WAAWC,aAAa,aAAe,KAAM,CAC1DH,EAAKE,QAAQ,WAAWC,aAAa,WAAWI,MAAM,KAAKpB,SAASqB,IAChER,EAAKP,UAAUgB,IAAID,OAcvBxB,oBAAoB0B,GACxB,GAAIC,OAAOC,WAAaC,EAAcC,GAAI,CACtC,GAAIJ,EAASjB,UAAUsB,SAAS,gBAAiB,CAC7C,GACIL,EAASM,kBACXC,aAEMC,SAASP,OAAOQ,iBACZT,EAASU,cAAc,qBACzBC,aAAc,IACdH,SAASP,OAAOQ,iBACdT,EAASU,cAAc,qBACzBE,UAAW,IACVZ,EAASU,cAAc,oBACxBH,aACR,CACE,IAAIM,EAAWb,EACVU,cAAc,oBAAoBI,wBAAwBC,EAC/DnC,MAAMC,KAAKmB,EAASgB,iBAAiB,qBAChCvC,SAAQ,CAACwC,EAAmBC,KACzB,GAAIA,EAAQ,EAAG,CACX,MAAMC,EAAMF,EAAKH,wBACjB,GAAIK,EAAIJ,EAAIF,EAAU,CAClBI,EAAKlC,UAAUgB,IAAI,QACnBc,EAAWM,EAAIJ,WAI5B,CACHnC,MAAMC,KAAKmB,EAASgB,iBAAiB,qBAChCvC,SAAQ,CAACwC,EAAmBC,KACzB,GAAIA,EAAQ,EAAG,CACXD,EAAKlC,UAAUqC,OAAO,kBAKvC,CACHxC,MAAMC,KAAKmB,EAASgB,iBAAiB,qBAChCvC,SAAQ,CAACwC,EAAmBC,KACzB,GAAIA,EAAQ,EAAG,CACXD,EAAKlC,UAAUqC,OAAO,cCpI9C,MAAMC,EAAiB,IAAIjD,EAE3B,MAAAkD,EAAeC,UAEXC,WAAWH,eAAiBA,GCLpB,MAACI,EAAgBH","sourcesContent":["/**\r\n * The card will wrap the content\r\n * depending upon whether or not the\r\n * card media can be displayed within\r\n * the calculated viewport while\r\n * still remaining true to the minimum\r\n * width outlined in the CSS.\r\n *\r\n * Those values are contained here for\r\n * reference\r\n */\r\n\r\nexport default {\r\n    flexBasis: 0.41666666667,\r\n    minWidth: 250\r\n};\r\n","/**\r\n * We only want a singular ResizeObserver instance\r\n * for performance reasons. This is a wrapper for\r\n * this API which allows us to add items to the\r\n * watched elements.\r\n *\r\n * Theoretically, it should also allow for\r\n * compartmentalization of functions to handle\r\n * specific treatment of \"observed\" elements\r\n */\r\nimport { ResizeObserver } from 'resize-observer'; // required for prerendering\r\nimport { _BREAKPOINTS_ } from 'utils';\r\n\r\nimport cardMediaVals from '../../components/Cards/assets/ts/_card-media';\r\n\r\nexport default class C3ResizeObserver extends ResizeObserver {\r\n    constructor() {\r\n        super((entries) => {\r\n            entries.forEach((entry) => {\r\n                const cssClasses = Array.from(entry.target.classList);\r\n\r\n                if (cssClasses.some(\r\n                    (cssClass) => /c3-card/g.test(cssClass)\r\n                )) this.wrapCard(entry.target as HTMLElement);\r\n\r\n                if (cssClasses.some(\r\n                    (cssClass) => /c3-flex-list/g.test(cssClass)\r\n                )) this.wrapInlineListGroup(entry.target as HTMLElement);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Determines if a Card should display with\r\n     * contents stacked or side-by-side, based upon\r\n     * the configured Card image orientation and\r\n     * available real estate within the containing element.\r\n     *\r\n     * @param card HTMLElement\r\n     */\r\n    private wrapCard(card: HTMLElement) {\r\n        let cardClass = 'c3-card';\r\n\r\n        if (card.closest('c3-card').getAttribute('full-bleed') !== null) {\r\n            cardClass = `${cardClass}_full-bleed`;\r\n        }\r\n\r\n        if (card.closest('c3-card').getAttribute('card-style') !== null) {\r\n            cardClass = `${cardClass}_${card.closest('c3-card').getAttribute('card-style')}`;\r\n        }\r\n\r\n        if (card.offsetWidth * cardMediaVals.flexBasis < cardMediaVals.minWidth) {\r\n            card.classList.forEach((cssClass) => {\r\n                if (\r\n                    cssClass.includes(cardClass)\r\n                    && cssClass.includes('_img-left')\r\n                ) card.classList.replace(cssClass, cardClass);\r\n\r\n                if (\r\n                    cssClass.includes(cardClass)\r\n                    && cssClass.includes('_img-right')\r\n                ) card.classList.replace(cssClass, cardClass);\r\n            });\r\n        } else if (card.closest('c3-card').getAttribute('card-orientation')) {\r\n            card.classList.forEach((cssClass) => {\r\n                card.classList.replace(\r\n                    cssClass,\r\n                    `${cardClass}_${card.closest('c3-card').getAttribute('card-orientation')\r\n                    }`\r\n                );\r\n            });\r\n        } else {\r\n            card.classList.forEach((cssClass) => {\r\n                card.classList.replace(cssClass, `${cardClass}_img-left`);\r\n            });\r\n        }\r\n\r\n        if (card.closest('c3-card').getAttribute('classes') !== null) {\r\n            card.closest('c3-card').getAttribute('classes').split(' ').forEach((classString) => {\r\n                card.classList.add(classString);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Watches the FlexList to determine if\r\n     * an item has wrapped to a new line. If it has,\r\n     * and the list is meant to be justified-left,\r\n     * the observer will att the correct classes to\r\n     * ensure left padding is consistent.\r\n     *\r\n     * @param flexList HTMLElement\r\n     */\r\n    private wrapInlineListGroup(flexList: HTMLElement) {\r\n        if (window.innerWidth > _BREAKPOINTS_.md) {\r\n            if (flexList.classList.contains('justify-left')) {\r\n                if ((\r\n                    flexList.firstElementChild as HTMLElement\r\n                ).offsetHeight\r\n                    > ((\r\n                        parseInt(window.getComputedStyle(\r\n                            flexList.querySelector('.list-group-item') as HTMLElement\r\n                        ).marginBottom, 10)\r\n                        + parseInt(window.getComputedStyle(\r\n                            flexList.querySelector('.list-group-item') as HTMLElement\r\n                        ).marginTop, 10)\r\n                        + (flexList.querySelector('.list-group-item') as HTMLElement\r\n                        ).offsetHeight))\r\n                ) {\r\n                    let currentY = flexList\r\n                        .querySelector('.list-group-item').getBoundingClientRect().y;\r\n                    Array.from(flexList.querySelectorAll('.list-group-item'))\r\n                        .forEach((item: HTMLElement, index: Number) => {\r\n                            if (index > 0) {\r\n                                const box = item.getBoundingClientRect();\r\n                                if (box.y > currentY) {\r\n                                    item.classList.add('ps-0');\r\n                                    currentY = box.y;\r\n                                }\r\n                            }\r\n                        });\r\n                } else {\r\n                    Array.from(flexList.querySelectorAll('.list-group-item'))\r\n                        .forEach((item: HTMLElement, index: Number) => {\r\n                            if (index > 0) {\r\n                                item.classList.remove('ps-0');\r\n                            }\r\n                        });\r\n                }\r\n            }\r\n        } else {\r\n            Array.from(flexList.querySelectorAll('.list-group-item'))\r\n                .forEach((item: HTMLElement, index: Number) => {\r\n                    if (index > 0) {\r\n                        item.classList.remove('ps-0');\r\n                    }\r\n                });\r\n        }\r\n    }\r\n}\r\n","import { C3ResizeObserver } from 'utils';\r\n\r\nconst resizeObserver = new C3ResizeObserver();\r\n\r\nexport default async () => {\r\n    // Bind any global functions that might be needed (WINDOW OBJECT)\r\n    globalThis.resizeObserver = resizeObserver;\r\n};\r\n","import appGlobalScript from 'G:/dev/web/cjtangney/static/src/assets/ts/c3.ts';\nexport const globalScripts = appGlobalScript;\n"]}